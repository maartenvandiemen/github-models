name: AI Issue Triage

on:
  issues:
    types: [opened, edited]

permissions:
  contents: read
  issues: write
  models: read

env:
  MODEL: gpt-4o-mini
  READY_LABEL: ready-for-dev
  TRIAGED_LABEL: triaged
  NEEDS_INFO_LABEL: needs-more-info
  AI_LABEL: ai-triage

jobs:
  triage:
    if: ${{ !contains(github.event.issue.labels.*.name, 'no-ai-triage') }}
    runs-on: ubuntu-latest
    concurrency:
      group: issue-ai-triage-${{ github.event.issue.number }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Prepare inputs
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          title=$(jq -r '.issue.title // ""' "$GITHUB_EVENT_PATH")
          printf "title=%s\n" "$title" >> "$GITHUB_OUTPUT"
          jq -r '.issue.body // ""' "$GITHUB_EVENT_PATH" > issue_body.txt

      - name: Run AI inference with GitHub Models
        id: ai
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ steps.prep.outputs.title }}
        shell: bash
        run: |
          set -euo pipefail

          # Read the issue body
          issue_body=$(cat issue_body.txt)

          # Prepare the prompt based on the prompt file structure
          system_prompt="You are a senior triage engineer. Evaluate GitHub issues for actionability.
          Always return ONLY JSON that matches the provided schema. No code fences or extra text.
          Return a single-line, minified JSON object with no surrounding Markdown fences or prose."

          user_prompt="Evaluate whether this issue is actionable for a developer without asking for more details.

          Consider missing: reproduction steps, expected vs actual, environment (OS, versions),
          logs/stack traces, screenshots, minimal example, scope/acceptance criteria, and constraints.

          Issue Title:
          ${ISSUE_TITLE}

          Issue Body:
          ${issue_body}"

          # Create prompt file for gh api
          cat > prompt.json << EOF
          {
            "model": "$MODEL",
            "messages": [
              {"role": "system", "content": $(echo "$system_prompt" | jq -Rs .)},
              {"role": "user", "content": $(echo "$user_prompt" | jq -Rs .)}
            ],
            "max_tokens": 1000,
            "temperature": 0.1
          }
          EOF

          # Call GitHub Models API using gh cli
          response=$(gh api \
            --method POST \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            /models/chat/completions \
            --input prompt.json) || {
            echo "AI API call failed, using fallback"
            response='{"choices": [{"message": {"content": ""}}]}'
          }

          # Extract content from response
          content=$(echo "$response" | \
            jq -r '.choices[0].message.content // empty')

          # Set outputs for the parsing step
          echo "AI_CONTENT=$content" >> "$GITHUB_ENV"
          echo "AI_RESPONSE=$response" >> "$GITHUB_ENV"

          # Also set as step outputs for backward compatibility
          echo "content=$content" >> "$GITHUB_OUTPUT"
          echo "response=$response" >> "$GITHUB_OUTPUT"

      - name: Parse AI JSON
        id: parse
        env:
          AI_CONTENT: ${{ steps.ai.outputs.content }}
          AI_RESPONSE: ${{ steps.ai.outputs.response }}
        shell: bash
        run: |
          set -euo pipefail
          bash .github/scripts/parse-ai-json.sh

      - name: Apply triage outcome (labels + comment)
        if: success()
        env:
          AI: ${{ steps.parse.outputs.ai }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          number=${{ github.event.issue.number }}

          if [ -z "${AI:-}" ] || [ "${AI}" = "null" ]; then
            echo "AI output missing; adding ${NEEDS_INFO_LABEL}/${AI_LABEL}."
            gh issue edit "$number" --add-label "${NEEDS_INFO_LABEL}" || true
            gh issue edit "$number" --add-label "${AI_LABEL}" || true
            exit 0
          fi

          actionable=$(jq -r '.actionable // false' <<< "$AI")
          summary=$(jq -r '.summary // ""' <<< "$AI")

          # Base labels depending on actionability
          declare -a add_labels=()
          if [ "$actionable" = "true" ]; then
            add_labels+=("${READY_LABEL}" "${TRIAGED_LABEL}")
          else
            add_labels+=("${NEEDS_INFO_LABEL}" "${AI_LABEL}")
          fi

          # Any suggested labels from AI
          mapfile -t suggested < <(jq -r '.labels // [] | .[]' <<< "$AI")
          for l in "${suggested[@]}"; do
            [ -n "$l" ] && add_labels+=("$l")
          done

          # Add labels
          for l in "${add_labels[@]}"; do
            gh issue edit "$number" --add-label "$l" || true
          done

          # Remove mutually exclusive label
          if [ "$actionable" = "true" ]; then
            gh issue edit "$number" --remove-label "${NEEDS_INFO_LABEL}" || true
            # Comment concise summary
            summary_msg="AI triage summary: ${summary}\n\nLabeling as ${READY_LABEL}."
            gh issue comment "$number" --body "$(printf "$summary_msg")"
          else
            gh issue edit "$number" --remove-label "${READY_LABEL}" || true
            # Comment with missing info and questions
            mapfile -t missing < <(jq -r '.missing[]?' <<< "$AI")
            mapfile -t questions < <(jq -r '.questions[]?' <<< "$AI")

            {
              echo "Thanks for opening this issue! I ran an automated triage to help our maintainers."
              echo
              echo "Summary:"
              echo "$summary"
              echo
              if [ "${#missing[@]}" -gt 0 ]; then
                echo "To help a developer pick this up, please provide:"
                for m in "${missing[@]}"; do
                  echo "- $m"
                done
                echo
              fi
              if [ "${#questions[@]}" -gt 0 ]; then
                echo "Follow-up questions:"
                for q in "${questions[@]}"; do
                  echo "- $q"
                done
                echo
              fi
              echo "Once you've updated the issue, reply here and the bot will re-check."
              echo "To bypass, a maintainer can add the \"${READY_LABEL}\" label."
            } > comment.md

            gh issue comment "$number" -F comment.md
          fi
